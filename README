Actividad Final Mini-Proyecto - parte 1
===

# Expresiones Regulares
En su mayoría se utiliza la implementación trivial. Más allá de detalles de implementación, los que se presentaron como menos obvios fueron:

- Identificador: [[:lower:]][[:alnum:]_]*
- String constante: \".*\"
- Constante entera: [[:digit:]]+
- Constante flotante: [[:digit:]]+\.[[:digit:]]*

# CFG
Siguiendo las definiciones indicadas por el lenguaje, se tienen:
1. <PROGRAMA> ::= prog id ; <PROGRAMA_AUX>
  - <PROGRAMA_AUX> ::= <CUERPO> end | <VARS> <CUERPO> end
2. <VARS> ::= var <VARS_GEN>
  - <VARS_GEN> ::= <TIPO> : <VARS_INNER> ; <VARS_LOOP>
  - <VARS_LOOP> ::= <VARS_GEN> | \epsilon
  - <VARS_INNER> ::= id <VARS_INNER_LOOP>
    - <VARS_INNER_LOOP> ::= , <VARS_INNER> | \epsilon
3. <TIPO> ::= int | float
4. <CUERPO> ::= ( <CUERPO_AUX> )
  - <CUERPO_AUX> ::= <ESTATUTO> <CUERPO_AUX> | \epsilon
5. <ESTATUTO> ::= <ASIGNA> | <CONDICION> | <CICLO> | <ESCRITURA>
6. <ASIGNA> ::= id = <EXPRESION> ;
7. <CONDICION> ::= si ( <EXPRESION> ) <CUERPO> <CONDICION_AUX> ;
  - <CONDICION_AUX> ::= \epsilon | sino <CUERPO>
8. <CICLO> ::= mientras ( <EXPRESION> ) <CUERPO> ;
9. <ESCRITURA> ::= print ( <ESCRITURA_AUX> ) ;
  - <ESCRITURA_AUX> ::= <ESCRITURA_INNER> <ESCRITURA_FIND>
  - <ESCRITURA_FIND> ::= \epsilon | , <ESCRITURA_AUX>
  - <ESCRITURA_INNER> ::= <EXPRESION> | cte.string
10. <EXPRESION> ::= <EXP> <EXPRESION_COMP>
  - <EXPRESION_COMP> ::= \epsilon | <EXPRESION_OPERATOR_SELECT> <EXP>
  - <EXPRESION_OPERATOR_SELECT> ::= > | < | <>
11. <EXP> ::= <TERMINO> <EXP_AUX>
  - <EXP_AUX> ::= \epsilon | <EXP_OPERATOR> <EXP>
  - <EXP_OPERATOR> ::= + | -
12. <TERMINO> ::= <FACTOR> <TERMINO_AUX>
  - <TERMINO_AUX> ::= \epsilon | <TERMINO_OPERATOR> <TERMINO>
  - <TERMINO_OPERATOR> ::= * | /
13. <FACTOR> ::= ( <EXPRESION> ) | <VAR_CTE> | <FACTOR_CTE_SIGN> <VAR_CTE>
  - <FACTOR_CTE_SIGN> ::= + | -
14. <VAR_CTE> ::= id | cte_i | cte_f

# Uso del proyecto
```
make # Requieres GNU Make
sh ./RunTests.sh # Ejecuta los test cases, que en su mayoría son triviales
```

# Diseño
## Tabla de símbolos
TL;DR: Esto es un desastre
La idea es contener los valores en un hashmap, con llave el nombre de la variable y valor de una tupla con información importante (SymbolInfo)
En SymbolInfo se tiene un valor que indica el tipo de variable, el valor de la variable, un booleano que indica si es definido por el usuario y la ubicación en memoria que le corresponde

## Cubo Semántico
Tenemos 4 tipos importantes: INT, FLOAT, BOOL, STRING.
Sin embargo

## Cuádruplo
## Generador de código
## Manager de Memoria


# TODOs:
[ ] Implementar memoria para valores constantes
  [ ] Mantener el registro de constantes ya usadas para que no se tengan que repetir
[ ] La regla `<FACTOR_CTE_SIGN> <VAR_CTE>` de `<FACTOR>` no fue implementada en funcionalidad
  NOTE: No se eliminó de la gramática para evitar errores en el programa. Sin embargo esas variables se resuelve como positivas. Una solución viable es insertar una instrucción para multiplicar el valor por -1 para que tenga el valor correcto y posteriormente trabajar con esa dirección
